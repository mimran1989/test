name: Pull request flow

on:
  pull_request:
    branches: [next, Demo]

jobs:
  compile-apex-classes:
    name: Deploy apex files
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: noliran/branch-based-secrets@v1
        with:
          secrets: CI_TOKEN
      - name: Deploy apex files
        run: |
          cp -R . /source
          cd /source

          echo "\$token" > ../token.txt
          sed -i 's?$token?${{ env.CI_TOKEN }}?g' ../token.txt

          npm install --silent
          npx sfdx force:auth:sfdxurl:store -f ../token.txt -d -a DeployORG
          npx sfdx force:source:deploy -u DeployORG -w 10 -p force-app -c -l RunLocalTests --json  2> error.txt 1> output.txt || true
          node -e "const fs = require('fs-extra'); const o = JSON.parse(fs.readFileSync('output.txt', 'utf8'));
            console.log(o.message, '\n', o.stack, '\n', o.result?.details?.componentFailures, '\n', o.result?.details?.runTestResult?.failures);"
          node -e "const fs = require('fs-extra'); try { const o = JSON.parse(fs.readFileSync('error.txt', 'utf8')).result?.details; console.log(o?.componentFailures, '\n', o?.runTestResult?.failures); } catch(e) {}"
          node -e "const fs = require('fs-extra'); try { if(JSON.parse(fs.readFileSync('output.txt', 'utf8')).status == 1) process.exit(1); } catch(e){}"
          node -e "const fs = require('fs-extra'); try { if(JSON.parse(fs.readFileSync('error.txt', 'utf8')).status == 1) process.exit(1); } catch(e){}"
        env:
          CI_TOKEN: ${{ secrets[env.CI_TOKEN_NAME] }}
          SFDX_JSON_TO_STDOUT: true
  unit-tests:
    name: Execute javascript unit tests
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Execute javascript unit tests
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm run tests

  functional-tests:
    needs:
      [compile-apex-classes, unit-tests, build-javascript, analyze-code-style, analyze-code-quality]
    name: Execute functional tests
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: actions/upload-artifact@v2
        with:
          name: reports
          path: /source/tests/reports
      - name: Execute functional tests
        run: |
          cp -R . /source
          cd /source

          echo "\$token" > build/token.txt
          sed -i 's?$token?${{ env.HUB_TOKEN }}?g' build/token.txt

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm install --silent

          cd build
          export TEST_CAFE_BROWSER=chromium:headless
          node run-functional-tests.js -u token.txt
        env:
          HUB_TOKEN: ${{ secrets.HUB_TOKEN }}
          CUCUMBER_PUBLISH_TOKEN: ${{ secrets.CUCUMBER_REPORTS_TOKEN }}

  build-javascript:
    name: Compile and link javascript files
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Compile and link javascript files
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm install --silent
          npm run compile

  analyze-code-style:
    name: Analyze code style
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Analyze code style
        run: |
          cp -R . /source
          cd /source

          mkdir node_modules
          cp -R /node_modules/* /source/node_modules
          npm run lint

  analyze-code-quality:
    name: Analyze code quality
    runs-on: ubuntu-latest
    container:
      image: provus1/provus-ci:2.0

    timeout-minutes: 6
    steps:
      - uses: actions/checkout@v2
      - name: Analyze code quality
        run: |
          git fetch origin ${GITHUB_BASE_REF##*/}
          /cyborg/pmd-diff-checker.sh origin/${GITHUB_BASE_REF##*/} pmd-ruleset.xml
  lint-commit-message:
    name: Lint commit message
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v3
